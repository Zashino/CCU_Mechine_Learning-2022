# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tcqap9-UqS8Bu4nvAi9EvQGLQTzfpzqE
"""

import time
import random
import numpy as np
import matplotlib.pyplot as plt

def rand_samples(m, b, n_points, rand_param):
    pos_p = n_points // 2
    neg_p = n_points - pos_p
    X = []
    Y = []
    for i in range(pos_p):
        x = random.randint(0,rand_param)
        y = m * x + b - random.randint(5,rand_param)
        X.append([x,y,1])
        Y.append([1])

    for i in range(neg_p):
        x = random.randint(0,rand_param)
        y = m * x + b + random.randint(5,rand_param)
        X.append([x,y,1])
        Y.append([-1])

    X = np.array(X)
    Y = np.array(Y)
    return X, Y

def sign(x, w):
    return 1 if np.dot(x, w)>=0 else -1

def PLA(X, Y, w):
    num = len(X)
    w_change = 0
    for iter in range(1000):
        flag = 0
        for i in range(num):
            if sign(X[i],w)!=Y[i]:
                w = w + Y[i]*np.reshape(X[i], (len(X[i]),1))
                w_change += 1
                flag = 1
        if flag == 0:
            break
    return w, w_change

def Pocket(X, Y, w):
    num = len(X)
    error = len(X)
    tmp_w = w
    for iter in range(1000):
        tmp_error = 0
        for i in range(num):
            if sign(X[i],w)!=Y[i]:
                w = w + Y[i]*np.reshape(X[i], (len(X[i]),1))
                break;
        for j in range(num):
            if sign(X[j],w)!=Y[j]:
                tmp_error += 1
        if tmp_error < error:
           error = tmp_error
    
    return w

if __name__ == '__main__':
    # y = mx + b
    m, b = 2, 1

    # other parameters
    n_points = 1000
    rand_param = 600
    pos_num = int(n_points / 2)

    # plot function curve
    x = np.arange(rand_param + 1)   # x = [0, 1,..., rand_param]
    y = m * x + b

    # randomly generate points
    X,Y = rand_samples(m, b, n_points, rand_param)

    # reshape
    w0 = np.zeros((3,1))

    # PLA
    PLA_start = time.time()
    w,iter = PLA(X, Y, w0)
    PLA_end = time.time()

    x2 = np.arange(rand_param + 1)
    y2 = (-w[0] * x2 - w[2])/w[1]
    plt.plot(x2, y2)

    # Pocket Algorithm
    Pocket_start = time.time()
    w = Pocket(X, Y, w0)
    Pocket_end = time.time()
    print('PLA time:', PLA_end - PLA_start, 's')
    print('Pocket time:', Pocket_end - Pocket_start, 's')

    x3 = np.arange(rand_param + 1)
    y3 = (-w[0] * x3 - w[2])/w[1]
    plt.plot(x3, y3)
    plt.plot(X[:pos_num,0], X[:pos_num,1], 'o', color='blue')   # positive
    plt.plot(X[pos_num:,0], X[pos_num:,1], 'o', color='red')    # negative
    plt.show