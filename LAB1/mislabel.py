# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P3u6iA4zRkvOFDGfSA9v2b6eir3JWOuV
"""

import random
import numpy as np
import matplotlib.pyplot as plt

def rand_samples(m, b, n_points, rand_param):
    pos_p = n_points // 2
    neg_p = n_points - pos_p
    X = []
    Y = []
    for i in range(pos_p):
        x = random.randint(0,rand_param)
        y = m * x + b - random.randint(5,rand_param)
        X.append([x,y,1])
        if i > pos_p-25:
            Y.append([-1])
        else:
            Y.append([1])

    for i in range(neg_p):
        x = random.randint(0,rand_param)
        y = m * x + b + random.randint(5,rand_param)
        X.append([x,y,1])
        if i > neg_p-25:
            Y.append([-1])
        else:
            Y.append([-1])

    X = np.array(X)
    Y = np.array(Y)
    return X, Y

def sign(x, w):
    return 1 if np.dot(x, w)>=0 else -1

def PLA(X, Y, w):
    num = len(X)
    w_change = 0
    for iter in range(100):
        flag = 0
        for i in range(num):
            if sign(X[i],w)!=Y[i]:
                w = w + Y[i]*np.reshape(X[i], (len(X[i]),1))
                w_change += 1
                flag = 1
        if flag == 0:
            break
    return w, w_change

def Pocket(X, Y, w):
    num = len(X)
    w_change = 0
    error = len(X)
    tmp_w = w
    for iter in range(1000):
        tmp_error = 0
        for i in range(num):
            if sign(X[i],w)!=Y[i]:
                w = w + Y[i]*np.reshape(X[i], (len(X[i]),1))
                break;
        for j in range(num):
            if sign(X[j],w)!=Y[j]:
                tmp_error += 1
        if tmp_error < error:
           error = tmp_error
           w_change += 1
    
    return w, w_change

if __name__ == '__main__':
    # y = mx + b
    m, b = 2, 1

    # other parameters
    n_points = 1000
    rand_param = 600
    pos_num = int(n_points / 2)

    # plot function curve
    x = np.arange(rand_param + 1)   # x = [0, 1,..., rand_param]
    y = m * x + b
    plt.plot(x, y)

    # randomly generate points
    X,Y = rand_samples(m, b, n_points, rand_param)

    # reshape
    w0 = np.zeros((3,1))

    # Pocket Algorithm
    w,iter = Pocket(X, Y, w0)

    error = 0
    for j in range(n_points):
        if sign(X[j],w)!=Y[j]:
            error += 1
    acc = 1 - error/n_points
    print(error)
    print(f"PLA accuracy:{'%.2f'%(acc * 100)}%")

    x3 = np.arange(rand_param + 1)
    y3 = (-w[0] * x3 - w[2])/w[1]
    plt.plot(x3, y3)
    plt.plot(X[:pos_num-25,0], X[:pos_num-25,1], 'o', color='red')   # 25
    plt.plot(X[pos_num-25:pos_num,0], X[pos_num-25:pos_num,1], 'o', color='blue')
    plt.plot(X[pos_num:-25,0], X[pos_num:-25,1], 'o', color='blue')   # 25
    plt.plot(X[-25:,0], X[-25:,1], 'o', color='red')
    plt.show